

/* ci.edl - Top EDL file. */

/* Here we define the compiler enclave of ci, there are two apis: */
/* compiler2_init */
/* compile_method() */

enclave {

    //from "LocalAttestationCode/LocalAttestationCode.edl" import *;
    from "../PanoplyEnclave/Thread/Pthread.edl" import *;
    from "../PanoplyEnclave/SysEnvironment/sgx_time.edl" import *;
    from "sgx_tstdc.edl" import sgx_thread_wait_untrusted_event_ocall, sgx_thread_set_untrusted_event_ocall, sgx_thread_setwait_untrusted_events_ocall, sgx_thread_set_multiple_untrusted_events_ocall;

    // from "../PanoplyEnclave/EnclaveUtil/util.edl" import *;

    from "../PanoplyEnclave/SysEnvironment/sgx_pwd.edl" import *;
    from "../PanoplyEnclave/SysEnvironment/sgx_grp.edl" import *;
    from "../PanoplyEnclave/SysEnvironment/sgx_utsname.edl" import *;
    from "../PanoplyEnclave/SysEnvironment/sgx_getopt.edl" import *;
    from "../PanoplyEnclave/IO/sgx_stdlib.edl" import *;
    from "../PanoplyEnclave/IO/sgx_fcntl.edl" import *;
    from "../PanoplyEnclave/IO/sgx_dlfcn.edl" import *;
    from "../PanoplyEnclave/IO/sgx_unistd.edl" import *;
    from "../PanoplyEnclave/IO/sgx_stdio.edl" import *;
    from "../PanoplyEnclave/IO/sgx_syseventfd.edl" import *;
    from "../PanoplyEnclave/IO/sgx_syssocket.edl" import *;
    from "../PanoplyEnclave/IO/sgx_netdb.edl" import *;
    from "../PanoplyEnclave/IO/sgx_netinetin.edl" import *;
    from "../PanoplyEnclave/IO/sgx_sysioctl.edl" import *;
    from "../PanoplyEnclave/IO/sgx_sysuio.edl" import *;
    from "../PanoplyEnclave/IO/sgx_sysmman.edl" import *;
    from "../PanoplyEnclave/IO/sgx_poll.edl" import *;
    from "../PanoplyEnclave/IO/sgx_sysepoll.edl" import *;
    from "../PanoplyEnclave/IO/sgx_sysselect.edl" import *;
    from "../PanoplyEnclave/IO/sgx_syssendfile.edl" import *;
    from "../PanoplyEnclave/IO/sgx_syswait.edl" import *;
    from "../PanoplyEnclave/IO/sgx_sysstat.edl" import *;
    from "../PanoplyEnclave/IO/sgx_dirent.edl" import *;
    from "../PanoplyEnclave/IO/sgx_sysresource.edl" import *;
    from "../PanoplyEnclave/IO/sgx_arpainet.edl" import *;
    from "../PanoplyEnclave/IO/sgx_sysctl.edl" import *;
    from "../PanoplyEnclave/IO/sgx_signal.edl" import *;
    from "../PanoplyEnclave/Net/sgx_ifaddrs.edl" import *;
    from "../PanoplyEnclave/Net/sgx_netif.edl" import *;

    trusted {
        /* define ECALLs here. */
        // include "compiler/abstractCompiler.hpp"
        include "enclave/sc/securecompiler.h"
        public void* c1_initialize([user_check]void* cpuid, [user_check]void** top, [user_check]void** bottom, [user_check]void** klass_list);
        public void gc_scavenge([user_check]void* tasks, int n);
        public int within_enclave([user_check]void *addr);
        public void* interpreted_entry_zero_locals([user_check]void* rbx, [user_check]int* exp, int functional);
        // public void c1_compile_method([user_check]ciEnv* env,[user_check] ciMethod* target, int entry_bci);
    };
    untrusted {
        void* ocall_interpreter([user_check]void* r14, int size, [user_check]void* method, [user_check]void* thread, [user_check]void* sender);
        void ocall_jvm_resolve_invoke(int byte, [user_check]void* mh, int bci, [user_check]void* recv, int idx,
                                        [user_check]void* bcp, [user_check]void* recv_klass);
        void ocall_jvm_resolve_invoke_handle();
        void ocall_jvm_resolve_invoke_dynamic();
        void* ocall_jvm_ldc(bool wide, [user_check]void* p, int index);
        void* ocall_jvm_resolve_ldc([user_check]void* p, int index, int byte);
        void ocall_jvm_resolve_get_put(int byte, [user_check]void* mh, int idx, [user_check]void* bcp);
        void* ocall_klass_type_array();
        void* ocall_klass_type();
        void* ocall_obj_array_klass_get([user_check]void* pool, int index);
        void* ocall_klass_resolve_or_fail([in, string]const char* name);
        void* ocall_klass_get([user_check]void* pool, int index);
        void ocall_klass_compute_oopmap([user_check]void* klass, [user_check]void* m, int bci);
        void* ocall_array_klass([user_check]void* klass, int rank, int get_all);
        void* ocall_multi_array_klass_get([user_check]void* pool, int index);
        void ocall_jvm_pre_native([user_check]void* method, int resolve);
        void* ocall_jvm_malloc(int size);
    };

};
